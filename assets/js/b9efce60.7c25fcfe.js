"use strict";(self.webpackChunkgephi_documentation=self.webpackChunkgephi_documentation||[]).push([[3520],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),g=p(n),m=r,u=g["".concat(s,".").concat(m)]||g[m]||c[m]||o;return n?a.createElement(u,i(i({ref:t},d),{},{components:n})):a.createElement(u,i({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},9463:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const o={id:"connectors",title:"Connectors"},i=void 0,l={unversionedId:"Community/connectors",id:"Community/connectors",title:"Connectors",description:"An R package to build GEXF graph files",source:"@site/docs/03_Community/Connectors.md",sourceDirName:"03_Community",slug:"/Community/connectors",permalink:"/gephi-documentation/Community/connectors",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/03_Community/Connectors.md",tags:[],version:"current",frontMatter:{id:"connectors",title:"Connectors"},sidebar:"tutorialSidebar",previous:{title:"Code in",permalink:"/gephi-documentation/Community/code-in"},next:{title:"GSoC",permalink:"/gephi-documentation/Community/gsoc"}},s={},p=[{value:"An R package to build GEXF graph files",id:"an-r-package-to-build-gexf-graph-files",level:2},{value:"Exporting R data to GEXF graph files (some examples)",id:"exporting-r-data-to-gexf-graph-files-some-examples",level:3},{value:"Example 1: Static net",id:"example-1-static-net",level:4},{value:"Example 2: Dynamic net",id:"example-2-dynamic-net",level:4},{value:"Example 3: Node/Edge at a time",id:"example-3-nodeedge-at-a-time",level:4}],d={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"an-r-package-to-build-gexf-graph-files"},"An R package to build GEXF graph files"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"rgexf")," is an R package that allows to work with GEXF format graph files (XML) reading and writing GEXF files. Its main function, write.gexf, builds gexf files which as basic arguments requires two data.frames, a nodes matrix and a edges matrix. In addition it currently supports networks dynamics such as start and end attributes (for both, nodes and edges) and spells, including attributes and viz attributes (",(0,r.kt)("a",{parentName:"p",href:"https://bitbucket.org/gvegayon/rgexf"},"link"),").\nCurrent version is rgexf v0.14.3 (march 11, 2014) and its available in The Comprehensive R Archive Network (CRAN). ",(0,r.kt)("a",{parentName:"p",href:"http://cran.r-project.org/src/contrib/Archive/rgexf/"},"link"),"."),(0,r.kt)("p",null,"See the ",(0,r.kt)("a",{parentName:"p",href:"https://blog.gephi.org/2013/rgexf-an-r-library-to-work-with-gexf-graph-files/"},"gephi post"),"."),(0,r.kt)("h3",{id:"exporting-r-data-to-gexf-graph-files-some-examples"},"Exporting R data to GEXF graph files (some examples)"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"write.gexf()")," is a function that as basic arguments requires two matrices, a nodes matrix and a edges matrix, both character matrix. In addition it currently supports dynamics nodes/edges and attributes for nodes/edges."),(0,r.kt)("h4",{id:"example-1-static-net"},"Example 1: Static net"),(0,r.kt)("p",null,"Creating a group of individuals and their relations"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},'> people <- matrix(c(1:4, \'juan\', \'pedro\', \'matthew\', \'carlos\'),ncol=2)\n> people\n    [,1] [,2]    \n[1,] "1"  "juan"  \n[2,] "2"  "pedro" \n[3,] "3"  "matthew"\n[4,] "4"  "carlos"\n')),(0,r.kt)("p",null,"Defining the relations structure"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},"> relations <- matrix(c(1,4,1,2,1,3,2,3,3,4,4,2), ncol=2, byrow=T)\n    [,1] [,2]\n[1,]    1    4\n[2,]    1    2\n[3,]    1    3\n[4,]    2    3\n[5,]    3    4\n[6,]    4    2\n")),(0,r.kt)("p",null,"Getting things done"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},"> write.gexf(people, relations)\n")),(0,r.kt)("p",null,"output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0" encoding="UTF-8"?>\n<gexf xmlns="http://www.gexf.net/1.2draft" \nxmlns:viz="http://www.gexf.net/1.1draft/viz" \nxmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" \nxsi:schemaLocation="http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd" version="1.2">\n  <graph mode="static">\n    <nodes>\n      <node id="1" label="juan"/>\n      <node id="2" label="pedro"/>\n      <node id="3" label="matthew"/>\n      <node id="4" label="carlos"/>\n    </nodes>\n    <edges>\n      <edge source="1" target="4"/>\n      <edge source="1" target="2"/>\n      <edge source="1" target="3"/>\n      <edge source="2" target="3"/>\n      <edge source="3" target="4"/>\n      <edge source="4" target="2"/>\n    </edges>\n  </graph>\n</gexf>\n')),(0,r.kt)("h4",{id:"example-2-dynamic-net"},"Example 2: Dynamic net"),(0,r.kt)("p",null,"Defining the dynamic structure, note that there are some nodes that have NA at the end."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},"> time<-matrix(c(10.0,13.0,2.0,2.0,12.0,rep(NA,3)), nrow=4, ncol=2)\n> time\n     [,1] [,2]\n[1,]   10   12\n[2,]   13   NA\n[3,]    2   NA\n[4,]    2   NA\n")),(0,r.kt)("p",null,"Getting things done"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},"> write.gexf(people, relations, nodeDynamic=time)\n")),(0,r.kt)("p",null,"output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0" encoding="UTF-8"?>\n<gexf xmlns="http://www.gexf.net/1.2draft" \nxmlns:viz="http://www.gexf.net/1.1draft/viz" \nxmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" \nxsi:schemaLocation="http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd" version="1.2">\n  <graph mode="dynamic" start="2" end="13" timeformat="double" defaultedgetype="undirected">\n    <nodes>\n      <node id="1" label="juan" start="10" end="12"/>\n      <node id="2" label="pedro" start="13"/>\n      <node id="3" label="matthew" start="2"/>\n      <node id="4" label="carlos" start="2"/>\n    </nodes>\n    <edges>\n      <edge source="1" target="4"/>\n      <edge source="1" target="2"/>\n      <edge source="1" target="3"/>\n      <edge source="2" target="3"/>\n      <edge source="3" target="4"/>\n      <edge source="4" target="2"/>\n    </edges>\n  </graph>\n</gexf>\n')),(0,r.kt)("h4",{id:"example-3-nodeedge-at-a-time"},"Example 3: Node/Edge at a time"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"rgexf")," also supports writing graphs one element at a time."),(0,r.kt)("p",null,"Creating an empty graph (gexf object)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},"> mygraph <- new.gexf.graph()\n")),(0,r.kt)("p",null,"Adding some nodes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},'> mygraph <- add.gexf.node(mygraph, id=0, label="He")\n> mygraph <- add.gexf.node(mygraph, id=1, label="Her")\n')),(0,r.kt)("p",null,"Adding some edges and dynamics"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},"> mygraph <- add.gexf.edge(mygraph, id=0, source=0, target=1, start=10, end=15)\n> mygraph <- add.node.spell(mygraph, id=1, start=3, end=18)\n")))}c.isMDXComponent=!0}}]);