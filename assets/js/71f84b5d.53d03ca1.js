"use strict";(self.webpackChunkgephi_documentation=self.webpackChunkgephi_documentation||[]).push([[2666],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>d});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=o.createContext({}),c=function(e){var t=o.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=c(e.components);return o.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=c(r),d=n,h=u["".concat(p,".").concat(d)]||u[d]||m[d]||a;return r?o.createElement(h,i(i({ref:t},s),{},{components:r})):o.createElement(h,i({ref:t},s))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var c=2;c<a;c++)i[c]=r[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}u.displayName="MDXCreateElement"},3349:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var o=r(7462),n=(r(7294),r(3905));const a={id:"how-to-import-dynamic-network",title:"How to import dynamic network"},i=void 0,l={unversionedId:"Toolkit/How_to_code_with_the_toolkit/how-to-import-dynamic-network",id:"Toolkit/How_to_code_with_the_toolkit/how-to-import-dynamic-network",title:"How to import dynamic network",description:"This Toolkit Example is part of the toolkit-demos project, that can be downloaded from the website.",source:"@site/docs/07_Toolkit/How_to_code_with_the_toolkit/How-to-import-dynamic-network.md",sourceDirName:"07_Toolkit/How_to_code_with_the_toolkit",slug:"/Toolkit/How_to_code_with_the_toolkit/how-to-import-dynamic-network",permalink:"/gephi-documentation/Toolkit/How_to_code_with_the_toolkit/how-to-import-dynamic-network",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/07_Toolkit/How_to_code_with_the_toolkit/How-to-import-dynamic-network.md",tags:[],version:"current",frontMatter:{id:"how-to-import-dynamic-network",title:"How to import dynamic network"},sidebar:"tutorialSidebar",previous:{title:"How to generate graphs",permalink:"/gephi-documentation/Toolkit/How_to_code_with_the_toolkit/how-to-generate-graphs"},next:{title:"How to import from RDBMS",permalink:"/gephi-documentation/Toolkit/How_to_code_with_the_toolkit/how-to-import-from-rdbms"}},p={},c=[],s={toc:c};function m(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,o.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"This ",(0,n.kt)("a",{parentName:"p",href:"/Toolkit/how-to-build-the-toolkit"},"Toolkit Example")," is part of the toolkit-demos project, that can be downloaded from the ",(0,n.kt)("a",{parentName:"p",href:"http://gephi.org/toolkit"},"website"),"."),(0,n.kt)("hr",null),(0,n.kt)("p",null,"This demo shows how to create a dynamic network from a set of 'static' files using the ",(0,n.kt)("inlineCode",{parentName:"p"},"DynamicProcessor")," (Time Frame Import). It also shows how to read and filter dynamic attributes. See ",(0,n.kt)("a",{parentName:"p",href:"http://gephi.org/docs/api/org/gephi/data/attributes/type/package-summary.html"},"AttributesAPI")," types documentation to learn more about dynamic types."),(0,n.kt)("p",null,"It uses a simple dataset of three GEXF files. The graph has a ",(0,n.kt)("em",{parentName:"p"},"price")," attribute, which will therefore be set a ",(0,n.kt)("inlineCode",{parentName:"p"},"DYNAMIC_INTEGER")," type automatically. It does the following steps:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Create a project and a workspace, it is mandatory."),(0,n.kt)("li",{parentName:"ul"},"Import ",(0,n.kt)("em",{parentName:"li"},"timeframe1.gexf")," into an import container."),(0,n.kt)("li",{parentName:"ul"},"Create an configure the ",(0,n.kt)("inlineCode",{parentName:"li"},"DynamicProcessor"),"."),(0,n.kt)("li",{parentName:"ul"},"Append the container for the time ",(0,n.kt)("em",{parentName:"li"},"2007"),"."),(0,n.kt)("li",{parentName:"ul"},"Import timeframe2.gexf and append it for ",(0,n.kt)("em",{parentName:"li"},"2008"),"."),(0,n.kt)("li",{parentName:"ul"},"Import timeframe3.gexf and append it for ",(0,n.kt)("em",{parentName:"li"},"2009"),"."),(0,n.kt)("li",{parentName:"ul"},"Read the ",(0,n.kt)("em",{parentName:"li"},"price")," value for each node, one can see the value for each interval."),(0,n.kt)("li",{parentName:"ul"},"Use ",(0,n.kt)("inlineCode",{parentName:"li"},"AVERAGE")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"MAX")," evaluators to see how to get a Integer result from a ",(0,n.kt)("inlineCode",{parentName:"li"},"DynamicInteger")," for any time interval."),(0,n.kt)("li",{parentName:"ul"},"Create a dynamic range and attribute range filter queries. The aim is to keep the graph ","[2007-2008]"," with average price superior or equal to seven."),(0,n.kt)("li",{parentName:"ul"},"Add the filter query to the filter model and execute it. Get a ",(0,n.kt)("inlineCode",{parentName:"li"},"GraphView")," as a result."),(0,n.kt)("li",{parentName:"ul"},"Verify the node ",(0,n.kt)("em",{parentName:"li"},"4")," doesn't belong to the result, as it's average price is lower than seven.")),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"DynamicProcessor")," is able to import ",(0,n.kt)("inlineCode",{parentName:"p"},"DOUBLE")," (default) or ",(0,n.kt)("inlineCode",{parentName:"p"},"DATE")," values."),(0,n.kt)("p",null,"When filtering the graph using a ",(0,n.kt)("inlineCode",{parentName:"p"},"DynamicRangeFilter"),", parent filter queries (e.g executed after) are using the visible interval to get a simple result from a dynamic value. In this example that means the ",(0,n.kt)("inlineCode",{parentName:"p"},"AttributeRangeFilter")," is getting the ",(0,n.kt)("em",{parentName:"p"},"price")," from the ","[2007, 2008]"," interval only. The filter uses the default ",(0,n.kt)("inlineCode",{parentName:"p"},"Estimator")," set in the ",(0,n.kt)("inlineCode",{parentName:"p"},"DynamicModel"),". One can set these default estimators from the ",(0,n.kt)("inlineCode",{parentName:"p"},"DynamicController"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'public void script() {\n    //Init a project - and therefore a workspace\n    ProjectController pc = Lookup.getDefault().lookup(ProjectController.class);\n    pc.newProject();\n    Workspace workspace = pc.getCurrentWorkspace();\n \n    //Import first file\n    ImportController importController = Lookup.getDefault().lookup(ImportController.class);\n    Container container;\n    try {\n        File file = new File(getClass().getResource("/org/gephi/toolkit/demos/resources/timeframe1.gexf").toURI());\n        container = importController.importFile(file);\n    } catch (Exception ex) {\n        ex.printStackTrace();\n        return;\n    }\n \n    //Initialize the DynamicProcessor - which will append the container to the workspace\n    DynamicProcessor dynamicProcessor = new DynamicProcessor();\n    dynamicProcessor.setDateMode(false);    //Set \'true\' if you set real dates (ex: yyyy-mm-dd), it\'s double otherwise\n    dynamicProcessor.setLabelmatching(true);   //Set \'true\' if node matching is done on labels instead of ids\n \n    //Set date for this file\n    dynamicProcessor.setDate("2007");\n \n    //Process the container using the DynamicProcessor\n    importController.process(container, dynamicProcessor, workspace);\n \n    //Import second file\n    try {\n        File file = new File(getClass().getResource("/org/gephi/toolkit/demos/resources/timeframe2.gexf").toURI());\n        container = importController.importFile(file);\n    } catch (Exception ex) {\n        ex.printStackTrace();\n        return;\n    }\n \n    //Set date for this file\n    dynamicProcessor.setDate("2008");\n \n    //Process the second container\n    importController.process(container, dynamicProcessor, workspace);\n \n    //Import third file\n    try {\n        File file = new File(getClass().getResource("/org/gephi/toolkit/demos/resources/timeframe3.gexf").toURI());\n        container = importController.importFile(file);\n    } catch (Exception ex) {\n        ex.printStackTrace();\n        return;\n    }\n \n    //Set date for this file\n    dynamicProcessor.setDate("2009");\n \n    //Process the third container\n    importController.process(container, dynamicProcessor, workspace);\n \n    //Get the price attribute\n    GraphModel graphModel = Lookup.getDefault().lookup(GraphController.class).getModel();\n    Graph graph = graphModel.getGraph();\n    for (Node n : graph.getNodes()) {\n        DynamicInteger value = (DynamicInteger) n.getNodeData().getAttributes().getValue("price");\n        System.out.println("\'" + n.getNodeData().getLabel() + "\': " + value.toString());\n    }\n \n    //Get the price attribute in average - learn more about ESTIMATOR\n    for (Node n : graph.getNodes()) {\n        DynamicInteger value = (DynamicInteger) n.getNodeData().getAttributes().getValue("price");\n \n        Integer priceFrom2007to2009Avg = value.getValue(new Interval(2007, 2009), Estimator.AVERAGE);\n        System.out.println("With AVERAGE estimator: \'" + n.getNodeData().getLabel() + "\': " + priceFrom2007to2009Avg);\n \n        Integer priceFrom2007to2009Max = value.getValue(new Interval(2007, 2009), Estimator.MAX);\n        System.out.println("With MAX estimator: \'" + n.getNodeData().getLabel() + "\': " + priceFrom2007to2009Max);\n    }\n \n    //Create a dynamic range filter query\n    FilterController filterController = Lookup.getDefault().lookup(FilterController.class);\n    FilterBuilder[] builders = Lookup.getDefault().lookup(DynamicRangeBuilder.class).getBuilders();\n    DynamicRangeFilter dynamicRangeFilter = (DynamicRangeFilter) builders[0].getFilter();     //There is only one TIME_INTERVAL column, so it\'s always the [0] builder\n    Query dynamicQuery = filterController.createQuery(dynamicRangeFilter);\n \n    //Create a attribute range filter query - on the price column\n    AttributeModel attributeModel = Lookup.getDefault().lookup(AttributeController.class).getModel();\n    AttributeColumn priceCol = attributeModel.getNodeTable().getColumn("price");\n    AttributeRangeBuilder.AttributeRangeFilter attributeRangeFilter = new AttributeRangeBuilder.AttributeRangeFilter(priceCol);\n    Query priceQuery = filterController.createQuery(attributeRangeFilter);\n \n    //Set dynamic query as child of price query\n    filterController.add(priceQuery);\n    filterController.add(dynamicQuery);\n    filterController.setSubQuery(priceQuery, dynamicQuery);\n \n    //Set the filters parameters - Keep nodes between 2007-2008 which have average price >= 7\n    dynamicRangeFilter.setRange(new Range(2007.0, 2008.0));\n    attributeRangeFilter.setRange(new Range(7, Integer.MAX_VALUE));\n \n    //Execute the filter query\n    GraphView view = filterController.filter(priceQuery);\n    Graph filteredGraph = graphModel.getGraph(view);\n \n    //Node 3 shoudln\'t be in this graph\n    System.out.println("Node 3 in the filtered graph: " + filteredGraph.contains(graph.getNode("3")));\n')))}m.isMDXComponent=!0}}]);