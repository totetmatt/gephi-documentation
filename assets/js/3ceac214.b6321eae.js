"use strict";(self.webpackChunkgephi_documentation=self.webpackChunkgephi_documentation||[]).push([[2986],{3905:(e,t,o)=>{o.d(t,{Zo:()=>c,kt:()=>s});var r=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function d(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function i(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},a=Object.keys(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var p=r.createContext({}),l=function(e){var t=r.useContext(p),o=t;return e&&(o="function"==typeof e?e(t):d(d({},t),e)),o},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,a=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=l(o),s=n,g=u["".concat(p,".").concat(s)]||u[s]||h[s]||a;return o?r.createElement(g,d(d({ref:t},c),{},{components:o})):r.createElement(g,d({ref:t},c))}));function s(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=o.length,d=new Array(a);d[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:n,d[1]=i;for(var l=2;l<a;l++)d[l]=o[l];return r.createElement.apply(null,d)}return r.createElement.apply(null,o)}u.displayName="MDXCreateElement"},9035:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>p,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var r=o(7462),n=(o(7294),o(3905));const a={id:"how-to-manipulate-graph",title:"How to manipulate Graph"},d=void 0,i={unversionedId:"Toolkit/How_to_code_with_the_toolkit/how-to-manipulate-graph",id:"Toolkit/How_to_code_with_the_toolkit/how-to-manipulate-graph",title:"How to manipulate Graph",description:"This Toolkit Example is part of the toolkit-demos project, that can be downloaded from the website.",source:"@site/docs/07_Toolkit/How_to_code_with_the_toolkit/How-to-manipulate-Graph.md",sourceDirName:"07_Toolkit/How_to_code_with_the_toolkit",slug:"/Toolkit/How_to_code_with_the_toolkit/how-to-manipulate-graph",permalink:"/gephi-documentation/Toolkit/How_to_code_with_the_toolkit/how-to-manipulate-graph",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/07_Toolkit/How_to_code_with_the_toolkit/How-to-manipulate-Graph.md",tags:[],version:"current",frontMatter:{id:"how-to-manipulate-graph",title:"How to manipulate Graph"},sidebar:"tutorialSidebar",previous:{title:"How to layout a graph",permalink:"/gephi-documentation/Toolkit/How_to_code_with_the_toolkit/how-to-layout-a-graph"},next:{title:"How to manipulate attributes",permalink:"/gephi-documentation/Toolkit/How_to_code_with_the_toolkit/how-to-manipulate-attributes"}},p={},l=[],c={toc:l};function h(e){let{components:t,...o}=e;return(0,n.kt)("wrapper",(0,r.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"This ",(0,n.kt)("a",{parentName:"p",href:"/Toolkit/how-to-build-the-toolkit"},"Toolkit Example")," is part of the toolkit-demos project, that can be downloaded from the ",(0,n.kt)("a",{parentName:"p",href:"http://gephi.org/toolkit"},"website"),"."),(0,n.kt)("hr",null),(0,n.kt)("p",null,"This demo shows basic features from ",(0,n.kt)("a",{parentName:"p",href:"http://gephi.org/docs/api/org/gephi/graph/api/package-summary.html"},"GraphAPI"),", how to create and query a graph programmatically."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'//Init a project - and therefore a workspace\nProjectController pc = Lookup.getDefault().lookup(ProjectController.class);\npc.newProject();\nWorkspace workspace = pc.getCurrentWorkspace();\n \n//Get a graph model - it exists because we have a workspace\nGraphModel graphModel = Lookup.getDefault().lookup(GraphController.class).getModel();\n \n//Create three nodes\nNode n0 = graphModel.factory().newNode("n0");\nn0.setLabel("Node 0");\nNode n1 = graphModel.factory().newNode("n1");\nn1.setLabel("Node 1");\nNode n2 = graphModel.factory().newNode("n2");\nn2.setLabel("Node 2");\n \n//Create three edges\nEdge e1 = graphModel.factory().newEdge(n1, n2, 1, true);\nEdge e2 = graphModel.factory().newEdge(n0, n2, 2, true);\nEdge e3 = graphModel.factory().newEdge(n2, n0, 2, true);   //This is e2\'s mutual edge\n \n//Append as a Directed Graph\nDirectedGraph directedGraph = graphModel.getDirectedGraph();\ndirectedGraph.addNode(n0);\ndirectedGraph.addNode(n1);\ndirectedGraph.addNode(n2);\ndirectedGraph.addEdge(e1);\ndirectedGraph.addEdge(e2);\ndirectedGraph.addEdge(e3);\n \n//Count nodes and edges\nSystem.out.println("Nodes: "+directedGraph.getNodeCount()+" Edges: "+directedGraph.getEdgeCount());\n \n//Get a UndirectedGraph now and count edges\nUndirectedGraph undirectedGraph = graphModel.getUndirectedGraph();\nSystem.out.println("Edges: "+undirectedGraph.getEdgeCount());   //The mutual edge is automatically merged\n \n//Iterate over nodes\nfor(Node n : directedGraph.getNodes()) {\n    Node[] neighbors = directedGraph.getNeighbors(n).toArray();\n    System.out.println(n.getLabel()+" has "+neighbors.length+" neighbors");\n}\n \n//Iterate over edges\nfor(Edge e : directedGraph.getEdges()) {\n    System.out.println(e.getSource().getId()+" -> "+e.getTarget().getId());\n}\n \n//Find node by id\nNode node2 = directedGraph.getNode("n2");\n \n//Get degree\nSystem.out.println("Node2 degree: "+directedGraph.getDegree(node2));\n \n//Modify the graph while reading\n//Due to locking, you need to use toArray() on Iterable to be able to modify\n//the graph in a read loop\nfor(Node n : directedGraph.getNodes().toArray()) {\n    directedGraph.removeNode(n);\n}\n')))}h.isMDXComponent=!0}}]);