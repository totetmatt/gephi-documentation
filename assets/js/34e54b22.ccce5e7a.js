"use strict";(self.webpackChunkgephi_documentation=self.webpackChunkgephi_documentation||[]).push([[6300],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>d});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},i=Object.keys(e);for(o=0;o<i.length;o++)r=i[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)r=i[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=o.createContext({}),s=function(e){var t=o.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=s(e.components);return o.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),h=s(r),d=n,g=h["".concat(p,".").concat(d)]||h[d]||c[d]||i;return r?o.createElement(g,l(l({ref:t},u),{},{components:r})):o.createElement(g,l({ref:t},u))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,l=new Array(i);l[0]=h;var a={};for(var p in t)hasOwnProperty.call(t,p)&&(a[p]=t[p]);a.originalType=e,a.mdxType="string"==typeof e?e:n,l[1]=a;for(var s=2;s<i;s++)l[s]=r[s];return o.createElement.apply(null,l)}return o.createElement.apply(null,r)}h.displayName="MDXCreateElement"},5598:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>a,toc:()=>s});var o=r(7462),n=(r(7294),r(3905));const i={id:"how-to-use-filters",title:"How to use filters"},l=void 0,a={unversionedId:"Toolkit/How_to_code_with_the_toolkit/how-to-use-filters",id:"Toolkit/How_to_code_with_the_toolkit/how-to-use-filters",title:"How to use filters",description:"This Toolkit Example is part of the toolkit-demos project, that can be downloaded from the website.",source:"@site/docs/07_Toolkit/How_to_code_with_the_toolkit/How-to-use-filters.md",sourceDirName:"07_Toolkit/How_to_code_with_the_toolkit",slug:"/Toolkit/How_to_code_with_the_toolkit/how-to-use-filters",permalink:"/gephi-documentation/Toolkit/How_to_code_with_the_toolkit/how-to-use-filters",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/07_Toolkit/How_to_code_with_the_toolkit/How-to-use-filters.md",tags:[],version:"current",frontMatter:{id:"how-to-use-filters",title:"How to use filters"},sidebar:"tutorialSidebar",previous:{title:"How to reuse the Preview Applet",permalink:"/gephi-documentation/Toolkit/How_to_code_with_the_toolkit/how-to-reuse-the-preview-applet"},next:{title:"How to use partition",permalink:"/gephi-documentation/Toolkit/How_to_code_with_the_toolkit/how-to-use-partition"}},p={},s=[],u={toc:s};function c(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,o.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"This ",(0,n.kt)("a",{parentName:"p",href:"/Toolkit/how-to-build-the-toolkit"},"Toolkit Example")," is part of the toolkit-demos project, that can be downloaded from the ",(0,n.kt)("a",{parentName:"p",href:"http://gephi.org/toolkit"},"website"),"."),(0,n.kt)("hr",null),(0,n.kt)("p",null,"This demo shows how to create and execute filter queries."),(0,n.kt)("p",null,"The demo creates three filters queries and execute them:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Filter degrees, remove nodes with degree < 10"),(0,n.kt)("li",{parentName:"ul"},"Filter with partition, keep nodes with 'source' column equal to 'Blogorama'"),(0,n.kt)("li",{parentName:"ul"},"Intersection between degrees and partition, AND filter with two precedent filters"),(0,n.kt)("li",{parentName:"ul"},"Ego filter")),(0,n.kt)("p",null,"When a filter query is executed, it creates a new ",(0,n.kt)("a",{parentName:"p",href:"http://gephi.org/docs/api/org/gephi/graph/api/GraphView.html"},"GraphView"),", which is a copy of the graph structure that went through the filter pipeline. Several filters can be chained by setting sub-queries. A query is a tree where the root is the last executed filter."),(0,n.kt)("p",null,"See also ",(0,n.kt)("a",{parentName:"p",href:"http://gephi.org/docs/api/org/gephi/filters/api/package-summary.html"},"FiltersAPI")," documentation and find ",(0,n.kt)("a",{parentName:"p",href:"http://gephi.org/docs/toolkit/org/gephi/filters/spi/Filter.html"},"all filters that inherit from Filter"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'//Init a project - and therefore a workspace\nProjectController pc = Lookup.getDefault().lookup(ProjectController.class);\npc.newProject();\nWorkspace workspace = pc.getCurrentWorkspace();\n \n//Get controllers and models\nImportController importController = Lookup.getDefault().lookup(ImportController.class);\nGraphModel graphModel = Lookup.getDefault().lookup(GraphController.class).getModel();\nAttributeModel attributeModel = Lookup.getDefault().lookup(AttributeController.class).getModel();\n \n//Import file\nContainer container;\ntry {\n    File file = new File(getClass().getResource("/org/gephi/toolkit/demos/resources/polblogs.gml").toURI());\n    container = importController.importFile(file);\n} catch (Exception ex) {\n    ex.printStackTrace();\n    return;\n}\n \n//Append imported data to GraphAPI\nimportController.process(container, new DefaultProcessor(), workspace);\n \n//Filter, remove degree < 10\nFilterController filterController = Lookup.getDefault().lookup(FilterController.class);\nDegreeRangeFilter degreeFilter = new DegreeRangeFilter();\ndegreeFilter.init(graphModel.getGraph());\ndegreeFilter.setRange(new Range(10, Integer.MAX_VALUE));     //Remove nodes with degree < 10\nQuery query = filterController.createQuery(degreeFilter);\nGraphView view = filterController.filter(query);\ngraphModel.setVisibleView(view);    //Set the filter result as the visible view\n \n//Count nodes and edges on filtered graph\nDirectedGraph graph = graphModel.getDirectedGraphVisible();\nSystem.out.println("Nodes: " + graph.getNodeCount() + " Edges: " + graph.getEdgeCount());\n \n//Filter, keep partition \'Blogarama\'. Build partition with \'source\' column in the data\nPartitionController partitionController = Lookup.getDefault().lookup(PartitionController.class);\nPartition p = partitionController.buildPartition(attributeModel.getNodeTable().getColumn("source"), graph);\nNodePartitionFilter partitionFilter = new NodePartitionFilter(p);\npartitionFilter.unselectAll();\npartitionFilter.addPart(p.getPartFromValue("Blogarama"));\nQuery query2 = filterController.createQuery(partitionFilter);\nGraphView view2 = filterController.filter(query2);\ngraphModel.setVisibleView(view2);    //Set the filter result as the visible view\n \n//Count nodes and edges on filtered graph\ngraph = graphModel.getDirectedGraphVisible();\nSystem.out.println("Nodes: " + graph.getNodeCount() + " Edges: " + graph.getEdgeCount());\n \n//Combine two filters with AND - Set query and query2 as sub-query of AND\nIntersectionOperator intersectionOperator = new IntersectionOperator();\nQuery query3 = filterController.createQuery(intersectionOperator);\nfilterController.setSubQuery(query3, query);\nfilterController.setSubQuery(query3, query2);\nGraphView view3 = filterController.filter(query3);\ngraphModel.setVisibleView(view3);    //Set the filter result as the visible view\n \n//Count nodes and edges on filtered graph\ngraph = graphModel.getDirectedGraphVisible();\nSystem.out.println("Nodes: " + graph.getNodeCount() + " Edges: " + graph.getEdgeCount());\n \n//Ego filter\nEgoFilter egoFilter = new EgoFilter();\negoFilter.setPattern("obamablog.com"); //Regex accepted\negoFilter.setDepth(1);\nQuery queryEgo = filterController.createQuery(egoFilter);\nGraphView viewEgo = filterController.filter(queryEgo);\ngraphModel.setVisibleView(viewEgo);    //Set the filter result as the visible view\n \n//Count nodes and edges on filtered graph\ngraph = graphModel.getDirectedGraphVisible();\nSystem.out.println("Nodes: " + graph.getNodeCount() + " Edges: " + graph.getEdgeCount());\n')))}c.isMDXComponent=!0}}]);