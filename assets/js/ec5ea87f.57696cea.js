"use strict";(self.webpackChunkgephi_documentation=self.webpackChunkgephi_documentation||[]).push([[4022],{3905:(e,t,o)=>{o.d(t,{Zo:()=>c,kt:()=>m});var n=o(7294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var s=n.createContext({}),d=function(e){var t=n.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},c=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=d(o),m=r,g=u["".concat(s,".").concat(m)]||u[m]||p[m]||a;return o?n.createElement(g,i(i({ref:t},c),{},{components:o})):n.createElement(g,i({ref:t},c))}));function m(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=o.length,i=new Array(a);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var d=2;d<a;d++)i[d]=o[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,o)}u.displayName="MDXCreateElement"},5574:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var n=o(7462),r=(o(7294),o(3905));const a={id:"how-to-import-from-rdbms",title:"How to import from RDBMS"},i=void 0,l={unversionedId:"Toolkit/How_to_code_with_the_toolkit/how-to-import-from-rdbms",id:"Toolkit/How_to_code_with_the_toolkit/how-to-import-from-rdbms",title:"How to import from RDBMS",description:"This Toolkit Example is part of the toolkit-demos project, that can be downloaded from the website.",source:"@site/docs/07_Toolkit/How_to_code_with_the_toolkit/How-to-import-from-RDBMS.md",sourceDirName:"07_Toolkit/How_to_code_with_the_toolkit",slug:"/Toolkit/How_to_code_with_the_toolkit/how-to-import-from-rdbms",permalink:"/gephi-documentation/Toolkit/How_to_code_with_the_toolkit/how-to-import-from-rdbms",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/07_Toolkit/How_to_code_with_the_toolkit/How-to-import-from-RDBMS.md",tags:[],version:"current",frontMatter:{id:"how-to-import-from-rdbms",title:"How to import from RDBMS"},sidebar:"tutorialSidebar",previous:{title:"How to import dynamic network",permalink:"/gephi-documentation/Toolkit/How_to_code_with_the_toolkit/how-to-import-dynamic-network"},next:{title:"How to layout a graph",permalink:"/gephi-documentation/Toolkit/How_to_code_with_the_toolkit/how-to-layout-a-graph"}},s={},d=[],c={toc:d};function p(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This ",(0,r.kt)("a",{parentName:"p",href:"/Toolkit/how-to-build-the-toolkit"},"Toolkit Example")," is part of the toolkit-demos project, that can be downloaded from the ",(0,r.kt)("a",{parentName:"p",href:"http://gephi.org/toolkit"},"website"),"."),(0,r.kt)("hr",null),(0,r.kt)("p",null,'This demo shows how to import data from a MySQL database. The database format must be "Edge List", basically a table for nodes and a table for edges. See ',(0,r.kt)("a",{parentName:"p",href:"http://gephi.org/docs/api/org/gephi/io/importer/api/package-summary.html"},"ImportAPI")," documentation also."),(0,r.kt)("p",null,"To be found by the importer, you need to have following columns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Nodes: ID and LABEL"),(0,r.kt)("li",{parentName:"ul"},"Edges: SOURCE, TARGET and WEIGHT"),(0,r.kt)("li",{parentName:"ul"},"Any other column will be imported as attributes. Other recognized columns are X, Y and SIZE for nodes and ID and LABEL for edges.")),(0,r.kt)("p",null,"A possible toolkit use-case is a layout server. Therefore this demo layout the network imported from the database, layout it and update X, Y columns to the database."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'//Init a project - and therefore a workspace\nProjectController pc = Lookup.getDefault().lookup(ProjectController.class);\npc.newProject();\nWorkspace workspace = pc.getCurrentWorkspace();\n \n//Get controllers and models\nImportController importController = Lookup.getDefault().lookup(ImportController.class);\nGraphModel graphModel = Lookup.getDefault().lookup(GraphController.class).getModel();\nAttributeModel attributeModel = Lookup.getDefault().lookup(AttributeController.class).getModel();\n \n//Import database\nEdgeListDatabaseImpl db = new EdgeListDatabaseImpl();\ndb.setDBName("test");\ndb.setHost("localhost");\ndb.setUsername("root");\ndb.setPasswd("");\ndb.setSQLDriver(new MySQLDriver());\n//db.setSQLDriver(new PostgreSQLDriver());\n//db.setSQLDriver(new SQLServerDriver());\ndb.setPort(3306);\ndb.setNodeQuery("SELECT nodes.id AS id, nodes.label AS label, nodes.url FROM nodes");\ndb.setEdgeQuery("SELECT edges.source AS source, edges.target AS target, edges.name AS label, edges.weight AS weight FROM edges");\nImporterEdgeList edgeListImporter = new ImporterEdgeList();\nContainer container = importController.importDatabase(db, edgeListImporter);\ncontainer.setAllowAutoNode(false);      //Don\'t create missing nodes\ncontainer.getLoader().setEdgeDefault(EdgeDefault.UNDIRECTED);   //Force UNDIRECTED\n \n//Append imported data to GraphAPI\nimportController.process(container, new DefaultProcessor(), workspace);\n \n//See if graph is well imported\nUndirectedGraph graph = graphModel.getUndirectedGraph();\nSystem.out.println("Nodes: " + graph.getNodeCount());\nSystem.out.println("Edges: " + graph.getEdgeCount());\n \n//Layout - 100 Yifan Hu passes\nYifanHuLayout layout = new YifanHuLayout(null, new StepDisplacement(1f));\nlayout.setGraphModel(graphModel);\nlayout.resetPropertiesValues();\nlayout.initAlgo();\nfor (int i = 0; i < 100 && layout.canAlgo(); i++) {\n    layout.goAlgo();\n}\nlayout.endAlgo();\n \n//Export X, Y position to the DB\n//Connect database\nString url = SQLUtils.getUrl(db.getSQLDriver(), db.getHost(), db.getPort(), db.getDBName());\nConnection connection = null;\ntry {\n    //System.err.println("Try to connect at " + url);\n    connection = db.getSQLDriver().getConnection(url, db.getUsername(), db.getPasswd());\n    //System.err.println("Database connection established");\n} catch (SQLException ex) {\n    if (connection != null) {\ntry {\n    connection.close();\n    System.err.println("Database connection terminated");\n} catch (Exception e) { /* ignore close errors */ }\n    }\n    System.err.println("Failed to connect at " + url);\n    ex.printStackTrace(System.err);\n}\nif (connection == null) {\n    System.err.println("Failed to connect at " + url);\n}\n \n//Update\nint count = 0;\nfor (Node node : graph.getNodes().toArray()) {\n    String id = node.getNodeData().getId();\n    float x = node.getNodeData().x();\n    float y = node.getNodeData().y();\n \n    String query = "UPDATE " + db.getDBName() + ".nodes SET x = \'" + x + "\', y = \'" + y + "\' WHERE nodes.id=\'" + id+"\'";\n    try {\n        Statement s = connection.createStatement();\n        count += s.executeUpdate(query);\n        s.close();\n \n    } catch (SQLException e) {\n        System.err.println("Failed to update line node id = " + id);\n    }\n}\nSystem.err.println(count + " rows were updated");\n \n//Close connection\nif (connection != null) {\n    try {\n        connection.close();\n        //System.err.println("Database connection terminated");\n    } catch (Exception e) { /* ignore close errors */ }\n}\n')))}p.isMDXComponent=!0}}]);