"use strict";(self.webpackChunkgephi_documentation=self.webpackChunkgephi_documentation||[]).push([[2766],{3905:(e,o,r)=>{r.d(o,{Zo:()=>l,kt:()=>u});var t=r(7294);function n(e,o,r){return o in e?Object.defineProperty(e,o,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[o]=r,e}function a(e,o){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);o&&(t=t.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),r.push.apply(r,t)}return r}function p(e){for(var o=1;o<arguments.length;o++){var r=null!=arguments[o]?arguments[o]:{};o%2?a(Object(r),!0).forEach((function(o){n(e,o,r[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(r,o))}))}return e}function i(e,o){if(null==e)return{};var r,t,n=function(e,o){if(null==e)return{};var r,t,n={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],o.indexOf(r)>=0||(n[r]=e[r]);return n}(e,o);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],o.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=t.createContext({}),s=function(e){var o=t.useContext(c),r=o;return e&&(r="function"==typeof e?e(o):p(p({},o),e)),r},l=function(e){var o=s(e.components);return t.createElement(c.Provider,{value:o},e.children)},h={inlineCode:"code",wrapper:function(e){var o=e.children;return t.createElement(t.Fragment,{},o)}},g=t.forwardRef((function(e,o){var r=e.components,n=e.mdxType,a=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),g=s(r),u=n,m=g["".concat(c,".").concat(u)]||g[u]||h[u]||a;return r?t.createElement(m,p(p({ref:o},l),{},{components:r})):t.createElement(m,p({ref:o},l))}));function u(e,o){var r=arguments,n=o&&o.mdxType;if("string"==typeof e||n){var a=r.length,p=new Array(a);p[0]=g;var i={};for(var c in o)hasOwnProperty.call(o,c)&&(i[c]=o[c]);i.originalType=e,i.mdxType="string"==typeof e?e:n,p[1]=i;for(var s=2;s<a;s++)p[s]=r[s];return t.createElement.apply(null,p)}return t.createElement.apply(null,r)}g.displayName="MDXCreateElement"},5069:(e,o,r)=>{r.r(o),r.d(o,{assets:()=>c,contentTitle:()=>p,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var t=r(7462),n=(r(7294),r(3905));const a={id:"how-to-generate-graphs",title:"How to generate graphs"},p=void 0,i={unversionedId:"Toolkit/How_to_code_with_the_toolkit/how-to-generate-graphs",id:"Toolkit/How_to_code_with_the_toolkit/how-to-generate-graphs",title:"How to generate graphs",description:"This Toolkit Example is part of the toolkit-demos project, that can be downloaded from the website.",source:"@site/docs/07_Toolkit/How_to_code_with_the_toolkit/How-to-generate-graphs.md",sourceDirName:"07_Toolkit/How_to_code_with_the_toolkit",slug:"/Toolkit/How_to_code_with_the_toolkit/how-to-generate-graphs",permalink:"/gephi-documentation/Toolkit/How_to_code_with_the_toolkit/how-to-generate-graphs",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/07_Toolkit/How_to_code_with_the_toolkit/How-to-generate-graphs.md",tags:[],version:"current",frontMatter:{id:"how-to-generate-graphs",title:"How to generate graphs"},sidebar:"tutorialSidebar",previous:{title:"How to export to PDF or SVG",permalink:"/gephi-documentation/Toolkit/How_to_code_with_the_toolkit/how-to-export-to-pdf-or-svg"},next:{title:"How to import dynamic network",permalink:"/gephi-documentation/Toolkit/How_to_code_with_the_toolkit/how-to-import-dynamic-network"}},c={},s=[],l={toc:s};function h(e){let{components:o,...r}=e;return(0,n.kt)("wrapper",(0,t.Z)({},l,r,{components:o,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"This ",(0,n.kt)("a",{parentName:"p",href:"/Toolkit/how-to-build-the-toolkit"},"Toolkit Example")," is part of the toolkit-demos project, that can be downloaded from the ",(0,n.kt)("a",{parentName:"p",href:"http://gephi.org/toolkit"},"website"),"."),(0,n.kt)("hr",null),(0,n.kt)("p",null,"Demo how to generate a graph with generators. The code shows how to use ",(0,n.kt)("strong",{parentName:"p"},"RandomGraph")," and ",(0,n.kt)("strong",{parentName:"p"},"WattsStrogatz")," generators and push result into the graph structure using ",(0,n.kt)("strong",{parentName:"p"},"ImportController"),"."),(0,n.kt)("p",null,"In Gephi import and generate are not directly appened to the main graph structure for consistency reasons. New data are pushed in a ",(0,n.kt)("strong",{parentName:"p"},"Container")," and then appened to the graph structure with the help of a ",(0,n.kt)("strong",{parentName:"p"},"Processor"),".\nIn this demo, two workspaces are created. Manipulate workspaces from ",(0,n.kt)("strong",{parentName:"p"},"ProjectController"),"."),(0,n.kt)("p",null,"Gephi 0.8.x: "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"import org.gephi.project.api.ProjectController;\nimport org.openide.util.Lookup;\nimport org.gephi.project.api.Workspace;\nimport org.gephi.io.importer.api.Container;\nimport org.gephi.io.generator.plugin.RandomGraph;\nimport org.gephi.io.importer.api.ImportController;\nimport org.gephi.io.processor.plugin.DefaultProcessor;\nimport org.gephi.io.processor.plugin.AppendProcessor;\nimport org.gephi.io.generator.plugin.DynamicGraph;\n\n//Init a project - and therefore a workspace\nProjectController pc = Lookup.getDefault().lookup(ProjectController.class);\npc.newProject();\nWorkspace workspace = pc.getCurrentWorkspace();\n \n//Generate a new random graph into a container\nContainer container = Lookup.getDefault().lookup(ContainerFactory.class).newContainer();\nRandomGraph randomGraph = new RandomGraph();\nrandomGraph.setNumberOfNodes(500);\nrandomGraph.setWiringProbability(0.005);\nrandomGraph.generate(container.getLoader());\n \n//Append container to graph structure\nImportController importController = Lookup.getDefault().lookup(ImportController.class);\nimportController.process(container, new DefaultProcessor(), workspace);\n \n//Generate another graph and append it to the current workspace\nContainer container2 = Lookup.getDefault().lookup(ContainerFactory.class).newContainer();\nRandomGraph randomGraph2 = new RandomGraph();\nrandomGraph2.setNumberOfNodes(100);\nrandomGraph2.setWiringProbability(0.01);\nrandomGraph2.generate(container.getLoader());\nimportController.process(container2, new AppendProcessor(), workspace);     //Use AppendProcessor to append to current workspace\n \n//Create new workspace\nWorkspace workspace2 = pc.newWorkspace(pc.getCurrentProject());\npc.openWorkspace(workspace2);       //Set as current workspace\n \n//Generate dynamic graph into workspace 2\nContainer container3 = Lookup.getDefault().lookup(ContainerFactory.class).newContainer();\n \nDynamicGraph dynamicGraph = new DynamicGraph();\ndynamicGraph.generate(container3.getLoader());\nimportController.process(container3, new DefaultProcessor(), workspace2);\n")),(0,n.kt)("p",null,"Gephi 0.9.1:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"import org.gephi.project.api.ProjectController;\nimport org.openide.util.Lookup;\nimport org.gephi.project.api.Workspace;\nimport org.gephi.io.importer.api.Container;\nimport org.gephi.io.generator.plugin.RandomGraph;\nimport org.gephi.io.importer.api.ImportController;\nimport org.gephi.io.processor.plugin.DefaultProcessor;\nimport org.gephi.io.processor.plugin.AppendProcessor;\nimport org.gephi.io.generator.plugin.DynamicGraph;\n\n//Init a project - and therefore a workspace\nProjectController pc = Lookup.getDefault().lookup(ProjectController.class);\npc.newProject();\nWorkspace workspace = pc.getCurrentWorkspace();\n \n//Generate a new random graph into a container\nContainer container = Lookup.getDefault().lookup(Container.Factory.class).newContainer();\nRandomGraph randomGraph = new RandomGraph();\nrandomGraph.setNumberOfNodes(500);\nrandomGraph.setWiringProbability(0.005);\nrandomGraph.generate(container.getLoader());\n \n//Append container to graph structure\nImportController importController = Lookup.getDefault().lookup(ImportController.class);\nimportController.process(container, new DefaultProcessor(), workspace);\n \n//Generate another graph and append it to the current workspace\nContainer container2 = Lookup.getDefault().lookup(Container.Factory.class).newContainer();\nRandomGraph randomGraph2 = new RandomGraph();\nrandomGraph2.setNumberOfNodes(100);\nrandomGraph2.setWiringProbability(0.01);\nrandomGraph2.generate(container2.getLoader());\nimportController.process(container2, new AppendProcessor(), workspace);     //Use AppendProcessor to append to current workspace\n\n// Unknown error prevents Dynamic Graph from working in Gephi 0.9.1\n//Create new workspace\n//Workspace workspace2 = pc.newWorkspace(pc.getCurrentProject());\n//pc.openWorkspace(workspace2);       //Set as current workspace\n \n//Generate dynamic graph into workspace 2\n//Container container3 = Lookup.getDefault().lookup(Container.Factory.class).newContainer();\n \n//DynamicGraph dynamicGraph = new DynamicGraph();\n//dynamicGraph.generate(container3.getLoader());\n//importController.process(container3, new DefaultProcessor(), workspace2);\n")))}h.isMDXComponent=!0}}]);