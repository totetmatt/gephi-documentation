"use strict";(self.webpackChunkgephi_documentation=self.webpackChunkgephi_documentation||[]).push([[4573],{3905:(t,e,o)=>{o.d(e,{Zo:()=>u,kt:()=>m});var r=o(7294);function n(t,e,o){return e in t?Object.defineProperty(t,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[e]=o,t}function a(t,e){var o=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),o.push.apply(o,r)}return o}function i(t){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{};e%2?a(Object(o),!0).forEach((function(e){n(t,e,o[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(o,e))}))}return t}function l(t,e){if(null==t)return{};var o,r,n=function(t,e){if(null==t)return{};var o,r,n={},a=Object.keys(t);for(r=0;r<a.length;r++)o=a[r],e.indexOf(o)>=0||(n[o]=t[o]);return n}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(r=0;r<a.length;r++)o=a[r],e.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(t,o)&&(n[o]=t[o])}return n}var p=r.createContext({}),c=function(t){var e=r.useContext(p),o=e;return t&&(o="function"==typeof t?t(e):i(i({},e),t)),o},u=function(t){var e=c(t.components);return r.createElement(p.Provider,{value:e},t.children)},s={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(t,e){var o=t.components,n=t.mdxType,a=t.originalType,p=t.parentName,u=l(t,["components","mdxType","originalType","parentName"]),d=c(o),m=n,h=d["".concat(p,".").concat(m)]||d[m]||s[m]||a;return o?r.createElement(h,i(i({ref:e},u),{},{components:o})):r.createElement(h,i({ref:e},u))}));function m(t,e){var o=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var a=o.length,i=new Array(a);i[0]=d;var l={};for(var p in e)hasOwnProperty.call(e,p)&&(l[p]=e[p]);l.originalType=t,l.mdxType="string"==typeof t?t:n,i[1]=l;for(var c=2;c<a;c++)i[c]=o[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,o)}d.displayName="MDXCreateElement"},1346:(t,e,o)=>{o.r(e),o.d(e,{assets:()=>p,contentTitle:()=>i,default:()=>s,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=o(7462),n=(o(7294),o(3905));const a={id:"how-to-use-partition",title:"How to use partition"},i=void 0,l={unversionedId:"Toolkit/How_to_code_with_the_toolkit/how-to-use-partition",id:"Toolkit/How_to_code_with_the_toolkit/how-to-use-partition",title:"How to use partition",description:"This Toolkit Example is part of the toolkit-demos project, that can be downloaded from the website.",source:"@site/docs/07_Toolkit/How_to_code_with_the_toolkit/How-to-use-partition.md",sourceDirName:"07_Toolkit/How_to_code_with_the_toolkit",slug:"/Toolkit/How_to_code_with_the_toolkit/how-to-use-partition",permalink:"/gephi-documentation/Toolkit/How_to_code_with_the_toolkit/how-to-use-partition",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/07_Toolkit/How_to_code_with_the_toolkit/How-to-use-partition.md",tags:[],version:"current",frontMatter:{id:"how-to-use-partition",title:"How to use partition"},sidebar:"tutorialSidebar",previous:{title:"How to use filters",permalink:"/gephi-documentation/Toolkit/How_to_code_with_the_toolkit/how-to-use-filters"},next:{title:"How to use ranking",permalink:"/gephi-documentation/Toolkit/How_to_code_with_the_toolkit/how-to-use-ranking"}},p={},c=[],u={toc:c};function s(t){let{components:e,...o}=t;return(0,n.kt)("wrapper",(0,r.Z)({},u,o,{components:e,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"This ",(0,n.kt)("a",{parentName:"p",href:"/Toolkit/how-to-build-the-toolkit"},"Toolkit Example")," is part of the toolkit-demos project, that can be downloaded from the ",(0,n.kt)("a",{parentName:"p",href:"http://gephi.org/toolkit"},"website"),"."),(0,n.kt)("hr",null),(0,n.kt)("p",null,"This demo shows how to get partitions and apply color transformation to them. See also ",(0,n.kt)("a",{parentName:"p",href:"http://gephi.org/docs/api/org/gephi/partition/api/package-summary.html"},"PartitionAPI")," documentation (uncommented).\nPartitions are always created from an ",(0,n.kt)("a",{parentName:"p",href:"http://gephi.org/docs/api/org/gephi/data/attributes/api/AttributeColumn.html"},"AttributeColumn"),", in the data since import or computed from an algorithm. The demo so the following tasks:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Import a graph file."),(0,n.kt)("li",{parentName:"ul"},"Create and export to ",(0,n.kt)("em",{parentName:"li"},"partition1.pdf")," the graph colored from the ",(0,n.kt)("strong",{parentName:"li"},"source")," column."),(0,n.kt)("li",{parentName:"ul"},"Run modularity algorithm, detecting communities. The algorithm create a new column and label nodes with a community number."),(0,n.kt)("li",{parentName:"ul"},"Create and export to ",(0,n.kt)("em",{parentName:"li"},"partition2.pdf")," the graph colored from the ",(0,n.kt)("strong",{parentName:"li"},"modularity_class")," column"),(0,n.kt)("li",{parentName:"ul"},"Partitions are built from the ",(0,n.kt)("inlineCode",{parentName:"li"},"PartitionController")," service. Then the color transformer is created and passed with the partition to the controller to apply colors.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'//Init a project - and therefore a workspace\nProjectController pc = Lookup.getDefault().lookup(ProjectController.class);\npc.newProject();\nWorkspace workspace = pc.getCurrentWorkspace();\n \n//Get controllers and models\nImportController importController = Lookup.getDefault().lookup(ImportController.class);\nGraphModel graphModel = Lookup.getDefault().lookup(GraphController.class).getModel();\nAttributeModel attributeModel = Lookup.getDefault().lookup(AttributeController.class).getModel();\n \n//Import file\nContainer container;\ntry {\n    File file = new File(getClass().getResource("/org/gephi/toolkit/demos/resources/polblogs.gml").toURI());\n    container = importController.importFile(file);\n    container.getLoader().setEdgeDefault(EdgeDefault.DIRECTED);   //Force DIRECTED\n} catch (Exception ex) {\n    ex.printStackTrace();\n    return;\n}\n \n//Append imported data to GraphAPI\nimportController.process(container, new DefaultProcessor(), workspace);\n \n//See if graph is well imported\nDirectedGraph graph = graphModel.getDirectedGraph();\nSystem.out.println("Nodes: " + graph.getNodeCount());\nSystem.out.println("Edges: " + graph.getEdgeCount());\n \n//Partition with \'source\' column, which is in the data\nPartitionController partitionController = Lookup.getDefault().lookup(PartitionController.class);\nPartition p = partitionController.buildPartition(attributeModel.getNodeTable().getColumn("source"), graph);\nNodeColorTransformer nodeColorTransformer = new NodeColorTransformer();\nnodeColorTransformer.randomizeColors(p);\npartitionController.transform(p, nodeColorTransformer);\n \n//Export\nExportController ec = Lookup.getDefault().lookup(ExportController.class);\ntry {\n    ec.exportFile(new File("partition1.pdf"));\n} catch (IOException ex) {\n    ex.printStackTrace();\n    return;\n}\n \n//Run modularity algorithm - community detection\nModularity modularity = new Modularity();\nmodularity.execute(graphModel, attributeModel);\n \n//Partition with \'modularity_class\', just created by Modularity algorithm\nAttributeColumn modColumn = attributeModel.getNodeTable().getColumn(Modularity.MODULARITY_CLASS);\nPartition p2 = partitionController.buildPartition(modColumn, graph);\nSystem.out.println(p2.getPartsCount() + " partitions found");\nNodeColorTransformer nodeColorTransformer2 = new NodeColorTransformer();\nnodeColorTransformer2.randomizeColors(p2);\npartitionController.transform(p2, nodeColorTransformer2);\n \n//Export\ntry {\n    ec.exportFile(new File("partition2.pdf"));\n} catch (IOException ex) {\n    ex.printStackTrace();\n    return;\n}\n')))}s.isMDXComponent=!0}}]);