"use strict";(self.webpackChunkgephi_documentation=self.webpackChunkgephi_documentation||[]).push([[8451],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>g});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},l=Object.keys(e);for(o=0;o<l.length;o++)r=l[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)r=l[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=o.createContext({}),p=function(e){var t=o.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},c=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(r),g=n,m=d["".concat(s,".").concat(g)]||d[g]||u[g]||l;return r?o.createElement(m,a(a({ref:t},c),{},{components:r})):o.createElement(m,a({ref:t},c))}));function g(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=r.length,a=new Array(l);a[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:n,a[1]=i;for(var p=2;p<l;p++)a[p]=r[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,r)}d.displayName="MDXCreateElement"},3942:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var o=r(7462),n=(r(7294),r(3905));const l={id:"headless-example",title:"Headless Example"},a=void 0,i={unversionedId:"Toolkit/How_to_code_with_the_toolkit/headless-example",id:"Toolkit/How_to_code_with_the_toolkit/headless-example",title:"Headless Example",description:"This Toolkit Example is part of the toolkit-demos project, that can be downloaded from the website.",source:"@site/docs/07_Toolkit/How_to_code_with_the_toolkit/Headless-Example.md",sourceDirName:"07_Toolkit/How_to_code_with_the_toolkit",slug:"/Toolkit/How_to_code_with_the_toolkit/headless-example",permalink:"/gephi-documentation/Toolkit/How_to_code_with_the_toolkit/headless-example",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/07_Toolkit/How_to_code_with_the_toolkit/Headless-Example.md",tags:[],version:"current",frontMatter:{id:"headless-example",title:"Headless Example"},sidebar:"tutorialSidebar",previous:{title:"How to code with the Toolkit",permalink:"/gephi-documentation/category/how-to-code-with-the-toolkit"},next:{title:"How to compute a metric",permalink:"/gephi-documentation/Toolkit/How_to_code_with_the_toolkit/how-to-compute-a-metric"}},s={},p=[],c={toc:p};function u(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,o.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"This ",(0,n.kt)("a",{parentName:"p",href:"/Toolkit/how-to-build-the-toolkit"},"Toolkit Example")," is part of the toolkit-demos project, that can be downloaded from the ",(0,n.kt)("a",{parentName:"p",href:"http://gephi.org/toolkit"},"website"),"."),(0,n.kt)("hr",null),(0,n.kt)("p",null,"This demo shows several actions done with the toolkit, aiming to do a complete chain, from data import to results:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Create a project and a workspace, it is mandatory."),(0,n.kt)("li",{parentName:"ul"},"Import the polblogs.gml graph file in an import container."),(0,n.kt)("li",{parentName:"ul"},"Append the container to the main graph structure."),(0,n.kt)("li",{parentName:"ul"},"Filter the graph, using DegreeFilter."),(0,n.kt)("li",{parentName:"ul"},"Run layout manually."),(0,n.kt)("li",{parentName:"ul"},"Compute graph distance metrics."),(0,n.kt)("li",{parentName:"ul"},"Rank color by degree values."),(0,n.kt)("li",{parentName:"ul"},"Rank size by centrality values."),(0,n.kt)("li",{parentName:"ul"},"Configure preview to display labels and mutual edges differently."),(0,n.kt)("li",{parentName:"ul"},"Export graph as PDF.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'//Init a project - and therefore a workspace\nProjectController pc = Lookup.getDefault().lookup(ProjectController.class);\npc.newProject();\nWorkspace workspace = pc.getCurrentWorkspace();\n \n//Get models and controllers for this new workspace - will be useful later\nAttributeModel attributeModel = Lookup.getDefault().lookup(AttributeController.class).getModel();\nGraphModel graphModel = Lookup.getDefault().lookup(GraphController.class).getModel();\nPreviewModel model = Lookup.getDefault().lookup(PreviewController.class).getModel();\nImportController importController = Lookup.getDefault().lookup(ImportController.class);\nFilterController filterController = Lookup.getDefault().lookup(FilterController.class);\nRankingController rankingController = Lookup.getDefault().lookup(RankingController.class);\n \n//Import file       \nContainer container;\ntry {\n    File file = new File(getClass().getResource("/org/gephi/toolkit/demos/resources/polblogs.gml").toURI());\n    container = importController.importFile(file);\n    container.getLoader().setEdgeDefault(EdgeDefault.DIRECTED);   //Force DIRECTED\n} catch (Exception ex) {\n    ex.printStackTrace();\n    return;\n}\n \n//Append imported data to GraphAPI\nimportController.process(container, new DefaultProcessor(), workspace);\n \n//See if graph is well imported\nDirectedGraph graph = graphModel.getDirectedGraph();\nSystem.out.println("Nodes: " + graph.getNodeCount());\nSystem.out.println("Edges: " + graph.getEdgeCount());\n \n//Filter      \nDegreeRangeFilter degreeFilter = new DegreeRangeFilter();\ndegreeFilter.init(graph);\ndegreeFilter.setRange(new Range(30, Integer.MAX_VALUE));     //Remove nodes with degree < 30\nQuery query = filterController.createQuery(degreeFilter);\nGraphView view = filterController.filter(query);\ngraphModel.setVisibleView(view);    //Set the filter result as the visible view\n \n//See visible graph stats\nUndirectedGraph graphVisible = graphModel.getUndirectedGraphVisible();\nSystem.out.println("Nodes: " + graphVisible.getNodeCount());\nSystem.out.println("Edges: " + graphVisible.getEdgeCount());\n \n//Run YifanHuLayout for 100 passes - The layout always takes the current visible view\nYifanHuLayout layout = new YifanHuLayout(null, new StepDisplacement(1f));\nlayout.setGraphModel(graphModel);\nlayout.resetPropertiesValues();\nlayout.setOptimalDistance(200f);\nlayout.initAlgo();\n \nfor (int i = 0; i < 100 && layout.canAlgo(); i++) {\n    layout.goAlgo();\n}\nlayout.endAlgo();\n \n//Get Centrality\nGraphDistance distance = new GraphDistance();\ndistance.setDirected(true);\ndistance.execute(graphModel, attributeModel);\n \n//Rank color by Degree\nRanking degreeRanking = rankingController.getModel().getRanking(Ranking.NODE_ELEMENT, Ranking.DEGREE_RANKING);\nAbstractColorTransformer colorTransformer = (AbstractColorTransformer) rankingController.getModel().getTransformer(Ranking.NODE_ELEMENT, Transformer.RENDERABLE_COLOR);\ncolorTransformer.setColors(new Color[]{new Color(0xFEF0D9), new Color(0xB30000)});\nrankingController.transform(degreeRanking,colorTransformer);\n \n//Rank size by centrality\nAttributeColumn centralityColumn = attributeModel.getNodeTable().getColumn(GraphDistance.BETWEENNESS);\nRanking centralityRanking = rankingController.getModel().getRanking(Ranking.NODE_ELEMENT, centralityColumn.getId());\nAbstractSizeTransformer sizeTransformer = (AbstractSizeTransformer) rankingController.getModel().getTransformer(Ranking.NODE_ELEMENT, Transformer.RENDERABLE_SIZE);\nsizeTransformer.setMinSize(3);\nsizeTransformer.setMaxSize(10);\nrankingController.transform(centralityRanking,sizeTransformer);\n \n//Preview\nmodel.getProperties().putValue(PreviewProperty.SHOW_NODE_LABELS, Boolean.TRUE);\nmodel.getProperties().putValue(PreviewProperty.EDGE_COLOR, new EdgeColor(Color.GRAY));\nmodel.getProperties().putValue(PreviewProperty.EDGE_THICKNESS, new Float(0.1f));\nmodel.getProperties().putValue(PreviewProperty.NODE_LABEL_FONT, model.getProperties().getFontValue(PreviewProperty.NODE_LABEL_FONT).deriveFont(8));\n \n//Export\nExportController ec = Lookup.getDefault().lookup(ExportController.class);\ntry {\n    ec.exportFile(new File("headless_simple.pdf"));\n} catch (IOException ex) {\n    ex.printStackTrace();\n    return;\n}\n')))}u.isMDXComponent=!0}}]);