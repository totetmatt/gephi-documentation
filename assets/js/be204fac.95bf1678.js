"use strict";(self.webpackChunkgephi_documentation=self.webpackChunkgephi_documentation||[]).push([[6003],{3905:(t,e,o)=>{o.d(e,{Zo:()=>c,kt:()=>h});var a=o(7294);function r(t,e,o){return e in t?Object.defineProperty(t,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[e]=o,t}function n(t,e){var o=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),o.push.apply(o,a)}return o}function l(t){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{};e%2?n(Object(o),!0).forEach((function(e){r(t,e,o[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(o)):n(Object(o)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(o,e))}))}return t}function i(t,e){if(null==t)return{};var o,a,r=function(t,e){if(null==t)return{};var o,a,r={},n=Object.keys(t);for(a=0;a<n.length;a++)o=n[a],e.indexOf(o)>=0||(r[o]=t[o]);return r}(t,e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);for(a=0;a<n.length;a++)o=n[a],e.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(t,o)&&(r[o]=t[o])}return r}var u=a.createContext({}),p=function(t){var e=a.useContext(u),o=e;return t&&(o="function"==typeof t?t(e):l(l({},e),t)),o},c=function(t){var e=p(t.components);return a.createElement(u.Provider,{value:e},t.children)},s={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},y=a.forwardRef((function(t,e){var o=t.components,r=t.mdxType,n=t.originalType,u=t.parentName,c=i(t,["components","mdxType","originalType","parentName"]),y=p(o),h=r,d=y["".concat(u,".").concat(h)]||y[h]||s[h]||n;return o?a.createElement(d,l(l({ref:e},c),{},{components:o})):a.createElement(d,l({ref:e},c))}));function h(t,e){var o=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var n=o.length,l=new Array(n);l[0]=y;var i={};for(var u in e)hasOwnProperty.call(e,u)&&(i[u]=e[u]);i.originalType=t,i.mdxType="string"==typeof t?t:r,l[1]=i;for(var p=2;p<n;p++)l[p]=o[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,o)}y.displayName="MDXCreateElement"},3600:(t,e,o)=>{o.r(e),o.d(e,{assets:()=>u,contentTitle:()=>l,default:()=>s,frontMatter:()=>n,metadata:()=>i,toc:()=>p});var a=o(7462),r=(o(7294),o(3905));const n={id:"how-to-layout-a-graph",title:"How to layout a graph"},l=void 0,i={unversionedId:"Toolkit/How_to_code_with_the_toolkit/how-to-layout-a-graph",id:"Toolkit/How_to_code_with_the_toolkit/how-to-layout-a-graph",title:"How to layout a graph",description:"This Toolkit Example is part of the toolkit-demos project, that can be downloaded from the website.",source:"@site/docs/07_Toolkit/How_to_code_with_the_toolkit/How-to-layout-a-graph.md",sourceDirName:"07_Toolkit/How_to_code_with_the_toolkit",slug:"/Toolkit/How_to_code_with_the_toolkit/how-to-layout-a-graph",permalink:"/gephi-documentation/Toolkit/How_to_code_with_the_toolkit/how-to-layout-a-graph",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/07_Toolkit/How_to_code_with_the_toolkit/How-to-layout-a-graph.md",tags:[],version:"current",frontMatter:{id:"how-to-layout-a-graph",title:"How to layout a graph"},sidebar:"tutorialSidebar",previous:{title:"How to import from RDBMS",permalink:"/gephi-documentation/Toolkit/How_to_code_with_the_toolkit/how-to-import-from-rdbms"},next:{title:"How to manipulate Graph",permalink:"/gephi-documentation/Toolkit/How_to_code_with_the_toolkit/how-to-manipulate-graph"}},u={},p=[{value:"Manually",id:"manually",level:2},{value:"Automatically",id:"automatically",level:2}],c={toc:p};function s(t){let{components:e,...o}=t;return(0,r.kt)("wrapper",(0,a.Z)({},c,o,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This ",(0,r.kt)("a",{parentName:"p",href:"/Toolkit/how-to-build-the-toolkit"},"Toolkit Example")," is part of the toolkit-demos project, that can be downloaded from the ",(0,r.kt)("a",{parentName:"p",href:"http://gephi.org/toolkit"},"website"),"."),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"manually"},"Manually"),(0,r.kt)("p",null,"Layouts are iterative algorithms that change nodes' position at each pass. Each layout algorithm needs to get a graph model to be able to query the network. Parameters can be set directly to the layout. See existing layout implementation ",(0,r.kt)("a",{parentName:"p",href:"http://gephi.org/docs/toolkit/org/gephi/layout/plugin/AbstractLayout.html"},"here"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"//Run YifanHuLayout for 100 passes - The layout always takes the current visible view\nYifanHuLayout layout = new YifanHuLayout(null, new StepDisplacement(1f));\nlayout.setGraphModel(graphModel);\nlayout.initAlgo();\nlayout.resetPropertiesValues();\nlayout.setOptimalDistance(200f);\n \nfor (int i = 0; i < 100 && layout.canAlgo(); i++) {\n   layout.goAlgo();\n}\nlayout.endAlgo();\n")),(0,r.kt)("h2",{id:"automatically"},"Automatically"),(0,r.kt)("p",null,"This demo shows how to use the AutoLayout class to run layout programmatically."),(0,r.kt)("p",null,"You can set a layout duration, and an execution ratio for several layout. For instance you set 0.8 for a Yifan Hu algorithm and 0.2 for Label Adjust. If execution time is 100 seconds, the first algorithm run for 80 seconds and the second for 20 seconds. It also allows to change property values dynamically (at a certain ratio or interpolated if values are numerical)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'//Init a project - and therefore a workspace\nProjectController pc = Lookup.getDefault().lookup(ProjectController.class);\npc.newProject();\nWorkspace workspace = pc.getCurrentWorkspace();\n \n//Generate a new random graph into a container\nContainer container = Lookup.getDefault().lookup(ContainerFactory.class).newContainer();\nRandomGraph randomGraph = new RandomGraph();\nrandomGraph.setNumberOfNodes(500);\nrandomGraph.setWiringProbability(0.005);\nrandomGraph.generate(container.getLoader());\n \n//Append container to graph structure\nImportController importController = Lookup.getDefault().lookup(ImportController.class);\nimportController.process(container, new DefaultProcessor(), workspace);\n \n//See if graph is well imported\nGraphModel graphModel = Lookup.getDefault().lookup(GraphController.class).getModel();\nDirectedGraph graph = graphModel.getDirectedGraph();\nSystem.out.println("Nodes: " + graph.getNodeCount());\nSystem.out.println("Edges: " + graph.getEdgeCount());\n \n//Layout for 1 minute\nAutoLayout autoLayout = new AutoLayout(1, TimeUnit.MINUTES);\nautoLayout.setGraphModel(graphModel);\nYifanHuLayout firstLayout = new YifanHuLayout(null, new StepDisplacement(1f));\nForceAtlasLayout secondLayout = new ForceAtlasLayout(null);\nAutoLayout.DynamicProperty adjustBySizeProperty = AutoLayout.createDynamicProperty("forceAtlas.adjustSizes.name", Boolean.TRUE, 0.1f);//True after 10% of layout time\nAutoLayout.DynamicProperty repulsionProperty = AutoLayout.createDynamicProperty("forceAtlas.repulsionStrength.name", new Double(500.), 0f);//500 for the complete period\nautoLayout.addLayout(firstLayout, 0.5f);\nautoLayout.addLayout(secondLayout, 0.5f, new AutoLayout.DynamicProperty[]{adjustBySizeProperty, repulsionProperty});\nautoLayout.execute();\n')))}s.isMDXComponent=!0}}]);