"use strict";(self.webpackChunkgephi_documentation=self.webpackChunkgephi_documentation||[]).push([[7008],{3905:(t,e,o)=>{o.d(e,{Zo:()=>u,kt:()=>d});var r=o(7294);function n(t,e,o){return e in t?Object.defineProperty(t,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[e]=o,t}function i(t,e){var o=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),o.push.apply(o,r)}return o}function a(t){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{};e%2?i(Object(o),!0).forEach((function(e){n(t,e,o[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(o,e))}))}return t}function l(t,e){if(null==t)return{};var o,r,n=function(t,e){if(null==t)return{};var o,r,n={},i=Object.keys(t);for(r=0;r<i.length;r++)o=i[r],e.indexOf(o)>=0||(n[o]=t[o]);return n}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)o=i[r],e.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(t,o)&&(n[o]=t[o])}return n}var c=r.createContext({}),p=function(t){var e=r.useContext(c),o=e;return t&&(o="function"==typeof t?t(e):a(a({},e),t)),o},u=function(t){var e=p(t.components);return r.createElement(c.Provider,{value:e},t.children)},s={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(t,e){var o=t.components,n=t.mdxType,i=t.originalType,c=t.parentName,u=l(t,["components","mdxType","originalType","parentName"]),m=p(o),d=n,h=m["".concat(c,".").concat(d)]||m[d]||s[d]||i;return o?r.createElement(h,a(a({ref:e},u),{},{components:o})):r.createElement(h,a({ref:e},u))}));function d(t,e){var o=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var i=o.length,a=new Array(i);a[0]=m;var l={};for(var c in e)hasOwnProperty.call(e,c)&&(l[c]=e[c]);l.originalType=t,l.mdxType="string"==typeof t?t:n,a[1]=l;for(var p=2;p<i;p++)a[p]=o[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,o)}m.displayName="MDXCreateElement"},8292:(t,e,o)=>{o.r(e),o.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>s,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=o(7462),n=(o(7294),o(3905));const i={id:"how-to-compute-a-metric",title:"How to compute a metric"},a=void 0,l={unversionedId:"Toolkit/How_to_code_with_the_toolkit/how-to-compute-a-metric",id:"Toolkit/How_to_code_with_the_toolkit/how-to-compute-a-metric",title:"How to compute a metric",description:"This Toolkit Example is part of the toolkit-demos project, that can be downloaded from the website.",source:"@site/docs/07_Toolkit/How_to_code_with_the_toolkit/How-to-compute-a-metric.md",sourceDirName:"07_Toolkit/How_to_code_with_the_toolkit",slug:"/Toolkit/How_to_code_with_the_toolkit/how-to-compute-a-metric",permalink:"/gephi-documentation/Toolkit/How_to_code_with_the_toolkit/how-to-compute-a-metric",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/07_Toolkit/How_to_code_with_the_toolkit/How-to-compute-a-metric.md",tags:[],version:"current",frontMatter:{id:"how-to-compute-a-metric",title:"How to compute a metric"},sidebar:"tutorialSidebar",previous:{title:"Headless Example",permalink:"/gephi-documentation/Toolkit/How_to_code_with_the_toolkit/headless-example"},next:{title:"How to execute a metric over time",permalink:"/gephi-documentation/Toolkit/How_to_code_with_the_toolkit/how-to-execute-a-metric-over-time"}},c={},p=[],u={toc:p};function s(t){let{components:e,...o}=t;return(0,n.kt)("wrapper",(0,r.Z)({},u,o,{components:e,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"This ",(0,n.kt)("a",{parentName:"p",href:"/Toolkit/how-to-build-the-toolkit"},"Toolkit Example")," is part of the toolkit-demos project, that can be downloaded from the ",(0,n.kt)("a",{parentName:"p",href:"http://gephi.org/toolkit"},"website"),"."),(0,n.kt)("hr",null),(0,n.kt)("p",null,"How to execute a metric algorithm and get the result for each node. The algorithm write values in a column it creates. It is also possible to get the statistics report, as in Gephi. See the ",(0,n.kt)("a",{parentName:"p",href:"http://gephi.org/docs/toolkit/org/gephi/statistics/spi/Statistics.html"},"list of implemented metrics"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"//Get graph model and attribute model of current workspace\nGraphModel graphModel = Lookup.getDefault().lookup(GraphController.class).getModel();\nAttributeModel attributeModel = Lookup.getDefault().lookup(AttributeController.class).getModel();\n \n//Get Centrality\nGraphDistance distance = new GraphDistance();\ndistance.setDirected(true);\ndistance.execute(graphModel, attributeModel);\n \n//Get Centrality column created\nAttributeColumn col = attributeModel.getNodeTable().getColumn(GraphDistance.BETWEENNESS);\n \n//Iterate over values\nfor (Node n : graph.getNodes()) {\n   Double centrality = (Double)n.getNodeData().getAttributes().getValue(col.getIndex());\n}\n")))}s.isMDXComponent=!0}}]);